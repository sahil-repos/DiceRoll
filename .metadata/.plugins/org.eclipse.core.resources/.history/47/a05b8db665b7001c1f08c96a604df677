package game;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;

import models.Player;

public class PlayGame {
	private Queue<Player> playerQueue;
	
	private ArrayList<Integer> createRandomSequence(int n) {
		ArrayList<Integer> seq = new ArrayList<Integer>();
		    for (int i = 1; i <= n; i++) {
		        seq.add(i);
		    }
		    Collections.shuffle(seq);
		    return seq;
	}
	private void createPlayers(ArrayList<Integer> sequence) {
		for(int s: sequence) {
			Player p= new Player(s);
			playerQueue.add(p);
		}
	}
	
	
	public PlayGame(int numberOfPlayers){
		 playerQueue = new PriorityQueue<Player>(numberOfPlayers);
		ArrayList<Integer> sequence= this.createRandomSequence(numberOfPlayers);
		this.createPlayers(sequence);
		System.out.println("\n -----------READY TO PLAY----------- \n");
		
	}
	
	public int rollDice() {
		int min=1,max=7;
	    Random random = new Random();
	    return random.nextInt(max - min) + min;
	}
	
	public class PlayerComparator implements Comparator<Player>{
        
        // Overriding compare()method of Comparator 
       // for descending order of score
        public int compare(Player p1, Player p2) {
            if (p1.getScore() < p2.getScore()) {
                return 1;
            }
            else if (p1.getScore() > p1.getScore()) {
                return -1;
            }
            return 0;
            }
    }
	
	public void printScoreCard() {
		ArrayList<Player> scoreList=getHighScores();
		System.out.println("\n***************************\n");
		System.out.println("Player Name   | Score\n");
		for(Player p: scoreList) {
			System.out.println(p.getPlayerName() + ":" + p.getScore());
		}
		System.out.println("\n***************************\n");

	}
	
	public ArrayList<Player> getHighScores(){
		 ArrayList<Player> scoreList= new ArrayList<Player>(this.playerQueue);
		 Collections.sort(scoreList, new PlayerComparator());
		 return scoreList;
	}
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
		int targetScore=0,numberOfPlayers=0;
		
		//checking commandline arguements
		 if (args.length == 2) {
	            
			 targetScore=Integer.parseInt(args[1]);
			 numberOfPlayers=Integer.parseInt(args[0]);
	            
	        }
	        else {
	            System.out.println("Please enter two numbers in commandline arguements for number_of_players and target_Score");
	        }
		 
		 PlayGame game = new PlayGame(numberOfPlayers);
		 
		 
		 while(game.playerQueue.size()>0) {
			 Player currentPlayer= game.playerQueue.peek();
			 System.out.println(" Throwing dice for :" + currentPlayer.getPlayerName() );
			 
			 if(!currentPlayer.checkPenalty() || (currentPlayer.getScore() < targetScore) ){
				
				 int throwVal=game.rollDice();
				 System.out.println("Dice value: "+ throwVal);
				 currentPlayer.processThrow(throwVal);
				 
				 if(!currentPlayer.checkLuck() ){
					 
					 game.playerQueue.poll();
					 game.playerQueue.add(currentPlayer);
					 
				 }
				 else {
					 //no modification to queue
					 //players gets another go
				 }
				 
				 
				 
			 }
			 else {
				 //move queue without giving dice roll to player
				 System.out.println(" Skipping this player...");
				 game.playerQueue.poll();
				 game.playerQueue.add(currentPlayer);
			 }
			 
			 //print Score
			 game.printScoreCard();
			 
			 
		 }
		 
		 
		 
		 
		 
		 
		}
		catch(Exception e) {
			
		}
		 
	    }
		

	}


